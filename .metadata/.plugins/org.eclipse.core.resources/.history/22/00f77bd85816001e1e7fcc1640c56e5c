/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package pl.edu.pwr.raveen.ism.api;

import pl.edu.pwr.raveen.ism.model.Bookings;
import pl.edu.pwr.raveen.ism.model.Events;
import pl.edu.pwr.raveen.ism.model.Users;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-06-28T22:46:12.905970300+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "Default", description = "the Default API")
public interface DefaultApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /bookings : Retrieve a list of bookings
     *
     * @return A list of bookings (status code 200)
     */
    @Operation(
        operationId = "bookingsGet",
        summary = "Retrieve a list of bookings",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of bookings", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Bookings.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/bookings",
        produces = { "application/json" }
    )
    default ResponseEntity<Bookings> _bookingsGet(
        
    ) {
        return bookingsGet();
    }

    // Override this method
    default  ResponseEntity<Bookings> bookingsGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"NumberOfGuests\" : 5, \"CheckInDate\" : \"2000-01-23\", \"SpecialRequests\" : \"SpecialRequests\", \"UserID\" : 6, \"BookingID\" : 0, \"EventID\" : 1, \"CheckOutDate\" : \"2000-01-23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /bookings/{id} : Delete a booking
     *
     * @param id  (required)
     * @return Booking deleted (status code 200)
     */
    @Operation(
        operationId = "bookingsIdDelete",
        summary = "Delete a booking",
        responses = {
            @ApiResponse(responseCode = "200", description = "Booking deleted")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/bookings/{id}"
    )
    default ResponseEntity<Void> _bookingsIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return bookingsIdDelete(id);
    }

    // Override this method
    default  ResponseEntity<Void> bookingsIdDelete(Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /bookings/{id} : Retrieve a specific booking
     *
     * @param id  (required)
     * @return A single booking (status code 200)
     */
    @Operation(
        operationId = "bookingsIdGet",
        summary = "Retrieve a specific booking",
        responses = {
            @ApiResponse(responseCode = "200", description = "A single booking", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Bookings.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/bookings/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Bookings> _bookingsIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return bookingsIdGet(id);
    }

    // Override this method
    default  ResponseEntity<Bookings> bookingsIdGet(Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"NumberOfGuests\" : 5, \"CheckInDate\" : \"2000-01-23\", \"SpecialRequests\" : \"SpecialRequests\", \"UserID\" : 6, \"BookingID\" : 0, \"EventID\" : 1, \"CheckOutDate\" : \"2000-01-23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /bookings/{id} : Update an existing booking
     *
     * @param id  (required)
     * @param bookings  (required)
     * @return Booking updated (status code 200)
     */
    @Operation(
        operationId = "bookingsIdPut",
        summary = "Update an existing booking",
        responses = {
            @ApiResponse(responseCode = "200", description = "Booking updated")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/bookings/{id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _bookingsIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Bookings", description = "", required = true) @Valid @RequestBody Bookings bookings
    ) {
        return bookingsIdPut(id, bookings);
    }

    // Override this method
    default  ResponseEntity<Void> bookingsIdPut(Integer id, Bookings bookings) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /bookings : Create a new booking
     *
     * @param bookings  (required)
     * @return Booking created (status code 201)
     */
    @Operation(
        operationId = "bookingsPost",
        summary = "Create a new booking",
        responses = {
            @ApiResponse(responseCode = "201", description = "Booking created")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/bookings",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _bookingsPost(
        @Parameter(name = "Bookings", description = "", required = true) @Valid @RequestBody Bookings bookings
    ) {
        return bookingsPost(bookings);
    }

    // Override this method
    default  ResponseEntity<Void> bookingsPost(Bookings bookings) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /events : Retrieve a list of events
     *
     * @return A list of events (status code 200)
     */
    @Operation(
        operationId = "eventsGet",
        summary = "Retrieve a list of events",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of events", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Events.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/events",
        produces = { "application/json" }
    )
    default ResponseEntity<Events> _eventsGet(
        
    ) {
        return eventsGet();
    }

    // Override this method
    default  ResponseEntity<Events> eventsGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"FloorNumber\" : 5, \"EventNumber\" : 6, \"EventType\" : \"EventType\", \"EventStatus\" : \"EventStatus\", \"EventID\" : 0, \"PricePerNight\" : 1.4658129805029452 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /events/{id} : Delete an event
     *
     * @param id  (required)
     * @return Event deleted (status code 200)
     */
    @Operation(
        operationId = "eventsIdDelete",
        summary = "Delete an event",
        responses = {
            @ApiResponse(responseCode = "200", description = "Event deleted")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/events/{id}"
    )
    default ResponseEntity<Void> _eventsIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return eventsIdDelete(id);
    }

    // Override this method
    default  ResponseEntity<Void> eventsIdDelete(Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /events/{id} : Retrieve a specific event
     *
     * @param id  (required)
     * @return A single event (status code 200)
     */
    @Operation(
        operationId = "eventsIdGet",
        summary = "Retrieve a specific event",
        responses = {
            @ApiResponse(responseCode = "200", description = "A single event", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Events.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/events/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Events> _eventsIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return eventsIdGet(id);
    }

    // Override this method
    default  ResponseEntity<Events> eventsIdGet(Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"FloorNumber\" : 5, \"EventNumber\" : 6, \"EventType\" : \"EventType\", \"EventStatus\" : \"EventStatus\", \"EventID\" : 0, \"PricePerNight\" : 1.4658129805029452 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /events/{id} : Update an existing event
     *
     * @param id  (required)
     * @param events  (required)
     * @return Event updated (status code 200)
     */
    @Operation(
        operationId = "eventsIdPut",
        summary = "Update an existing event",
        responses = {
            @ApiResponse(responseCode = "200", description = "Event updated")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/events/{id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _eventsIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Events", description = "", required = true) @Valid @RequestBody Events events
    ) {
        return eventsIdPut(id, events);
    }

    // Override this method
    default  ResponseEntity<Void> eventsIdPut(Integer id, Events events) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /events : Create a new event
     *
     * @param events  (required)
     * @return Event created (status code 201)
     */
    @Operation(
        operationId = "eventsPost",
        summary = "Create a new event",
        responses = {
            @ApiResponse(responseCode = "201", description = "Event created")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/events",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _eventsPost(
        @Parameter(name = "Events", description = "", required = true) @Valid @RequestBody Events events
    ) {
        return eventsPost(events);
    }

    // Override this method
    default  ResponseEntity<Void> eventsPost(Events events) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users : Retrieve a list of users
     *
     * @return A list of users (status code 200)
     */
    @Operation(
        operationId = "usersGet",
        summary = "Retrieve a list of users",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of users", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Users.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    default ResponseEntity<Users> _usersGet(
        
    ) {
        return usersGet();
    }

    // Override this method
    default  ResponseEntity<Users> usersGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Email\" : \"Email\", \"UserID\" : 0, \"FirstName\" : \"FirstName\", \"PhoneNumber\" : \"PhoneNumber\", \"LastName\" : \"LastName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /users/{id} : Delete a user
     *
     * @param id  (required)
     * @return User deleted (status code 200)
     */
    @Operation(
        operationId = "usersIdDelete",
        summary = "Delete a user",
        responses = {
            @ApiResponse(responseCode = "200", description = "User deleted")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{id}"
    )
    default ResponseEntity<Void> _usersIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return usersIdDelete(id);
    }

    // Override this method
    default  ResponseEntity<Void> usersIdDelete(Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{id} : Retrieve a specific user
     *
     * @param id  (required)
     * @return A single user (status code 200)
     */
    @Operation(
        operationId = "usersIdGet",
        summary = "Retrieve a specific user",
        responses = {
            @ApiResponse(responseCode = "200", description = "A single user", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Users.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Users> _usersIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return usersIdGet(id);
    }

    // Override this method
    default  ResponseEntity<Users> usersIdGet(Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Email\" : \"Email\", \"UserID\" : 0, \"FirstName\" : \"FirstName\", \"PhoneNumber\" : \"PhoneNumber\", \"LastName\" : \"LastName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/{id} : Update an existing user
     *
     * @param id  (required)
     * @param users  (required)
     * @return User updated (status code 200)
     */
    @Operation(
        operationId = "usersIdPut",
        summary = "Update an existing user",
        responses = {
            @ApiResponse(responseCode = "200", description = "User updated")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _usersIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Users", description = "", required = true) @Valid @RequestBody Users users
    ) {
        return usersIdPut(id, users);
    }

    // Override this method
    default  ResponseEntity<Void> usersIdPut(Integer id, Users users) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /users : Create a new user
     *
     * @param users  (required)
     * @return User created (status code 201)
     */
    @Operation(
        operationId = "usersPost",
        summary = "Create a new user",
        responses = {
            @ApiResponse(responseCode = "201", description = "User created")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _usersPost(
        @Parameter(name = "Users", description = "", required = true) @Valid @RequestBody Users users
    ) {
        return usersPost(users);
    }

    // Override this method
    default  ResponseEntity<Void> usersPost(Users users) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
