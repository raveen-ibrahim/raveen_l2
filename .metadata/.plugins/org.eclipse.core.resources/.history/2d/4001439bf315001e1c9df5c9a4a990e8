/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package pl.edu.pwr.raveen.ism.api;

import pl.edu.pwr.raveen.ism.model.Event;
import pl.edu.pwr.raveen.ism.model.Guest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-06-27T21:10:39.899396900+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "Default", description = "the Default API")
public interface DefaultApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /events/{eventId} : Deletes a specific event by ID
     *
     * @param eventId Unique event ID (required)
     * @return Event deleted successfully (status code 200)
     *         or Event not found (status code 404)
     */
    @Operation(
        operationId = "eventsEventIdDelete",
        summary = "Deletes a specific event by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Event deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Event not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/events/{eventId}"
    )
    default ResponseEntity<Void> _eventsEventIdDelete(
        @Parameter(name = "eventId", description = "Unique event ID", required = true, in = ParameterIn.PATH) @PathVariable("eventId") String eventId
    ) {
        return eventsEventIdDelete(eventId);
    }

    // Override this method
    default  ResponseEntity<Void> eventsEventIdDelete(String eventId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /events/{eventId} : Retrieves a specific event by ID
     *
     * @param eventId Unique event ID (required)
     * @return Event details (status code 200)
     *         or Event not found (status code 404)
     */
    @Operation(
        operationId = "eventsEventIdGet",
        summary = "Retrieves a specific event by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Event details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Event.class))
            }),
            @ApiResponse(responseCode = "404", description = "Event not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/events/{eventId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Event> _eventsEventIdGet(
        @Parameter(name = "eventId", description = "Unique event ID", required = true, in = ParameterIn.PATH) @PathVariable("eventId") String eventId
    ) {
        return eventsEventIdGet(eventId);
    }

    // Override this method
    default  ResponseEntity<Event> eventsEventIdGet(String eventId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"location\" : \"location\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /events/{eventId}/guests : Deletes a specific guest by ID for a specific event
     *
     * @param eventId Unique event ID (required)
     * @return Guest deleted successfully (status code 200)
     *         or Guest not found (status code 404)
     */
    @Operation(
        operationId = "eventsEventIdGuestsDelete",
        summary = "Deletes a specific guest by ID for a specific event",
        responses = {
            @ApiResponse(responseCode = "200", description = "Guest deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Guest not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/events/{eventId}/guests"
    )
    default ResponseEntity<Void> _eventsEventIdGuestsDelete(
        @Parameter(name = "eventId", description = "Unique event ID", required = true, in = ParameterIn.PATH) @PathVariable("eventId") String eventId
    ) {
        return eventsEventIdGuestsDelete(eventId);
    }

    // Override this method
    default  ResponseEntity<Void> eventsEventIdGuestsDelete(String eventId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /events/{eventId}/guests : Retrieves all guests for a specific event
     *
     * @param eventId Unique event ID (required)
     * @return A list of guests for the event (status code 200)
     */
    @Operation(
        operationId = "eventsEventIdGuestsGet",
        summary = "Retrieves all guests for a specific event",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of guests for the event", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Guest.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/events/{eventId}/guests",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Guest>> _eventsEventIdGuestsGet(
        @Parameter(name = "eventId", description = "Unique event ID", required = true, in = ParameterIn.PATH) @PathVariable("eventId") String eventId
    ) {
        return eventsEventIdGuestsGet(eventId);
    }

    // Override this method
    default  ResponseEntity<List<Guest>> eventsEventIdGuestsGet(String eventId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"id\" : \"id\", \"email\" : \"email\", \"rsvp\" : \"true\" }, { \"name\" : \"name\", \"id\" : \"id\", \"email\" : \"email\", \"rsvp\" : \"true\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /events/{eventId}/guests : Adds a new guest to a specific event
     *
     * @param eventId Unique event ID (required)
     * @param guest  (required)
     * @return Guest added successfully (status code 200)
     *         or Invalid guest data provided (status code 400)
     */
    @Operation(
        operationId = "eventsEventIdGuestsPost",
        summary = "Adds a new guest to a specific event",
        responses = {
            @ApiResponse(responseCode = "200", description = "Guest added successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid guest data provided")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/events/{eventId}/guests",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _eventsEventIdGuestsPost(
        @Parameter(name = "eventId", description = "Unique event ID", required = true, in = ParameterIn.PATH) @PathVariable("eventId") String eventId,
        @Parameter(name = "Guest", description = "", required = true) @Valid @RequestBody Guest guest
    ) {
        return eventsEventIdGuestsPost(eventId, guest);
    }

    // Override this method
    default  ResponseEntity<Void> eventsEventIdGuestsPost(String eventId, Guest guest) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /events/{eventId}/guests : Updates a specific guest by ID for a specific event
     *
     * @param eventId Unique event ID (required)
     * @param guest  (required)
     * @return Guest updated successfully (status code 200)
     *         or Invalid guest data provided (status code 400)
     *         or Guest not found (status code 404)
     */
    @Operation(
        operationId = "eventsEventIdGuestsPut",
        summary = "Updates a specific guest by ID for a specific event",
        responses = {
            @ApiResponse(responseCode = "200", description = "Guest updated successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid guest data provided"),
            @ApiResponse(responseCode = "404", description = "Guest not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/events/{eventId}/guests",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _eventsEventIdGuestsPut(
        @Parameter(name = "eventId", description = "Unique event ID", required = true, in = ParameterIn.PATH) @PathVariable("eventId") String eventId,
        @Parameter(name = "Guest", description = "", required = true) @Valid @RequestBody Guest guest
    ) {
        return eventsEventIdGuestsPut(eventId, guest);
    }

    // Override this method
    default  ResponseEntity<Void> eventsEventIdGuestsPut(String eventId, Guest guest) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /events/{eventId} : Updates a specific event by ID
     *
     * @param eventId Unique event ID (required)
     * @param event  (required)
     * @return Event updated successfully (status code 200)
     *         or Invalid event data provided (status code 400)
     *         or Event not found (status code 404)
     */
    @Operation(
        operationId = "eventsEventIdPut",
        summary = "Updates a specific event by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Event updated successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid event data provided"),
            @ApiResponse(responseCode = "404", description = "Event not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/events/{eventId}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _eventsEventIdPut(
        @Parameter(name = "eventId", description = "Unique event ID", required = true, in = ParameterIn.PATH) @PathVariable("eventId") String eventId,
        @Parameter(name = "Event", description = "", required = true) @Valid @RequestBody Event event
    ) {
        return eventsEventIdPut(eventId, event);
    }

    // Override this method
    default  ResponseEntity<Void> eventsEventIdPut(String eventId, Event event) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /events : Retrieves all events
     *
     * @return A list of events (status code 200)
     */
    @Operation(
        operationId = "eventsGet",
        summary = "Retrieves all events",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of events", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Event.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/events",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Event>> _eventsGet(
        
    ) {
        return eventsGet();
    }

    // Override this method
    default  ResponseEntity<List<Event>> eventsGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"location\" : \"location\", \"id\" : \"id\" }, { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"location\" : \"location\", \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /events : Creates a new event
     *
     * @param event  (required)
     * @return Event created successfully (status code 200)
     *         or Invalid event data provided (status code 400)
     */
    @Operation(
        operationId = "eventsPost",
        summary = "Creates a new event",
        responses = {
            @ApiResponse(responseCode = "200", description = "Event created successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid event data provided")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/events",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _eventsPost(
        @Parameter(name = "Event", description = "", required = true) @Valid @RequestBody Event event
    ) {
        return eventsPost(event);
    }

    // Override this method
    default  ResponseEntity<Void> eventsPost(Event event) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
